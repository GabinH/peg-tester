
// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { Expression: peg$parseExpression };
  let peg$startRuleFunction: () => any = peg$parseExpression;

  const peg$c0 = "if (";
  const peg$c1 = peg$literalExpectation("if (", false);
  const peg$c2 = ")";
  const peg$c3 = peg$literalExpectation(")", false);
  const peg$c4 = "then (";
  const peg$c5 = peg$literalExpectation("then (", false);
  const peg$c6 = "else if (";
  const peg$c7 = peg$literalExpectation("else if (", false);
  const peg$c8 = "else (";
  const peg$c9 = peg$literalExpectation("else (", false);
  const peg$c10 = function(ifElement: any, thenElement: any, elseIfElements: any, elseElement: any): any {
      	if (ifElement) {
          	return thenElement;
          }
          if (elseIfElements && elseIfElements.length > 0) {
          	const elseIfElement = elseIfElements.find((element) => {
              	return element[3];
              })
              if (elseIfElement) {
              	return elseIfElement[9];
              }
          }
          return elseElement;
      };
  const peg$c11 = " ";
  const peg$c12 = peg$literalExpectation(" ", false);
  const peg$c13 = function(leftElement: any, operator: any, rightElement: any): any {
          switch (operator) {
              case "==":
                  return leftElement === rightElement;
              case "!=":
                  return leftElement !== rightElement;
              case "<":
                  return leftElement < rightElement;
              case "<=":
                  return leftElement <= rightElement;
              case ">":
                  return leftElement > rightElement;
              case ">=":
                  return leftElement <= rightElement;
          }
      };
  const peg$c14 = "==";
  const peg$c15 = peg$literalExpectation("==", false);
  const peg$c16 = "!=";
  const peg$c17 = peg$literalExpectation("!=", false);
  const peg$c18 = "<";
  const peg$c19 = peg$literalExpectation("<", false);
  const peg$c20 = "<=";
  const peg$c21 = peg$literalExpectation("<=", false);
  const peg$c22 = ">";
  const peg$c23 = peg$literalExpectation(">", false);
  const peg$c24 = ">=";
  const peg$c25 = peg$literalExpectation(">=", false);
  const peg$c26 = peg$otherExpectation("primitive");
  const peg$c27 = peg$otherExpectation("boolean");
  const peg$c28 = "true";
  const peg$c29 = peg$literalExpectation("true", false);
  const peg$c30 = function(): any { return true; };
  const peg$c31 = "false";
  const peg$c32 = peg$literalExpectation("false", false);
  const peg$c33 = function(): any { return false; };
  const peg$c34 = peg$otherExpectation("string");
  const peg$c35 = "'";
  const peg$c36 = peg$literalExpectation("'", false);
  const peg$c37 = /^[0-9a-zA-Z.]/;
  const peg$c38 = peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], "."], false, false);
  const peg$c39 = function(str: any): any { return str.join(""); };
  const peg$c40 = "\"";
  const peg$c41 = peg$literalExpectation("\"", false);
  const peg$c42 = peg$otherExpectation("variable");
  const peg$c43 = "#";
  const peg$c44 = peg$literalExpectation("#", false);
  const peg$c45 = function(key: any): any { return data[key.join("")]; };
  const peg$c46 = peg$otherExpectation("integer");
  const peg$c47 = /^[0-9]/;
  const peg$c48 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c49 = function(): any { return parseInt(text(), 10); };
  const peg$c50 = peg$otherExpectation("whitespace");
  const peg$c51 = /^[ \t\n\r]/;
  const peg$c52 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseExpression(): any {
    let s0;

    s0 = peg$parseStatement();

    return s0;
  }

  function peg$parseStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c0) {
        s2 = peg$c0;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOperation();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 as any !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c4) {
                    s8 = peg$c4;
                    peg$currPos += 6;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseInteger();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 as any !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s12 = peg$c2;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c3); }
                          }
                          if (s12 as any !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$currPos;
                            s15 = peg$parse_();
                            if (s15 as any !== peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c6) {
                                s16 = peg$c6;
                                peg$currPos += 9;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c7); }
                              }
                              if (s16 as any !== peg$FAILED) {
                                s17 = peg$parse_();
                                if (s17 as any !== peg$FAILED) {
                                  s18 = peg$parseOperation();
                                  if (s18 as any !== peg$FAILED) {
                                    s19 = peg$parse_();
                                    if (s19 as any !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s20 = peg$c2;
                                        peg$currPos++;
                                      } else {
                                        s20 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                      }
                                      if (s20 as any !== peg$FAILED) {
                                        s21 = peg$parse_();
                                        if (s21 as any !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c4) {
                                            s22 = peg$c4;
                                            peg$currPos += 6;
                                          } else {
                                            s22 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                          }
                                          if (s22 as any !== peg$FAILED) {
                                            s23 = peg$parse_();
                                            if (s23 as any !== peg$FAILED) {
                                              s24 = peg$parseInteger();
                                              if (s24 as any !== peg$FAILED) {
                                                s25 = peg$parse_();
                                                if (s25 as any !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 41) {
                                                    s26 = peg$c2;
                                                    peg$currPos++;
                                                  } else {
                                                    s26 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                                  }
                                                  if (s26 as any !== peg$FAILED) {
                                                    s15 = [s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26];
                                                    s14 = s15;
                                                  } else {
                                                    peg$currPos = s14;
                                                    s14 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s14;
                                                  s14 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s14;
                                                s14 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s14;
                                              s14 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                            while (s14 as any !== peg$FAILED) {
                              s13.push(s14);
                              s14 = peg$currPos;
                              s15 = peg$parse_();
                              if (s15 as any !== peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c6) {
                                  s16 = peg$c6;
                                  peg$currPos += 9;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                }
                                if (s16 as any !== peg$FAILED) {
                                  s17 = peg$parse_();
                                  if (s17 as any !== peg$FAILED) {
                                    s18 = peg$parseOperation();
                                    if (s18 as any !== peg$FAILED) {
                                      s19 = peg$parse_();
                                      if (s19 as any !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s20 = peg$c2;
                                          peg$currPos++;
                                        } else {
                                          s20 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                        }
                                        if (s20 as any !== peg$FAILED) {
                                          s21 = peg$parse_();
                                          if (s21 as any !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c4) {
                                              s22 = peg$c4;
                                              peg$currPos += 6;
                                            } else {
                                              s22 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                            }
                                            if (s22 as any !== peg$FAILED) {
                                              s23 = peg$parse_();
                                              if (s23 as any !== peg$FAILED) {
                                                s24 = peg$parseInteger();
                                                if (s24 as any !== peg$FAILED) {
                                                  s25 = peg$parse_();
                                                  if (s25 as any !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                      s26 = peg$c2;
                                                      peg$currPos++;
                                                    } else {
                                                      s26 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                                    }
                                                    if (s26 as any !== peg$FAILED) {
                                                      s15 = [s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26];
                                                      s14 = s15;
                                                    } else {
                                                      peg$currPos = s14;
                                                      s14 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s14;
                                                    s14 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s14;
                                                  s14 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s14;
                                                s14 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s14;
                                              s14 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            }
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 as any !== peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c8) {
                                  s15 = peg$c8;
                                  peg$currPos += 6;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                }
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parse_();
                                  if (s16 as any !== peg$FAILED) {
                                    s17 = peg$parseInteger();
                                    if (s17 as any !== peg$FAILED) {
                                      s18 = peg$parse_();
                                      if (s18 as any !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s19 = peg$c2;
                                          peg$currPos++;
                                        } else {
                                          s19 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                        }
                                        if (s19 as any !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c10(s4, s10, s13, s17);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOperation(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOperator();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s4 = peg$c11;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsePrimitive();
            if (s5 as any === peg$FAILED) {
              s5 = peg$parseVariable();
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOperator(): any {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c16) {
        s0 = peg$c16;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s0 = peg$c18;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c20) {
            s0 = peg$c20;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s0 = peg$c22;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
            if (s0 as any === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c24) {
                s0 = peg$c24;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePrimitive(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseInteger();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseString();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseBoolean();
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }

    return s0;
  }

  function peg$parseBoolean(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c30();
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c31) {
        s1 = peg$c31;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c33();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parseString(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseSingleQuoteString();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseDoubleQuoteString();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseSingleQuoteString(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDoubleQuoteString(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c40;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariable(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parseInteger(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c47.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c49();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parse_(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c51.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c51.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    return s0;
  }


  	const data = {
  	    daysFromLastSelection: options.data.daysFromLastSelection,
      	faithLevel: 1,
          hapinessLevel: 2,
          healthLevel: 3,
          securityLevel: 4,
          wealthLevel: 5,
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

